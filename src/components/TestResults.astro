---
export interface Props {
  results?: any;
  loading?: boolean;
  error?: string;
}

const { results, loading, error } = Astro.props;
---

<div class="bg-white rounded-lg shadow-lg p-6 max-w-4xl mx-auto">
  <div class="flex items-center justify-between mb-6">
    <h2 class="text-2xl font-bold text-gray-900">Amplitude MCP Test Results</h2>
    <button 
      id="run-tests" 
      class="bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
      data-loading="false"
    >
      <span class="button-text">Run Tests</span>
      <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white hidden loading-spinner" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    </button>
  </div>

  <!-- Results Container -->
  <div id="results-container">
    {error && (
      <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-red-800">Error</h3>
            <div class="mt-2 text-sm text-red-700">{error}</div>
          </div>
        </div>
      </div>
    )}

    {!results && !error && !loading && (
      <div class="text-center py-12">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <h3 class="mt-2 text-sm font-medium text-gray-900">No tests run yet</h3>
        <p class="mt-1 text-sm text-gray-500">Click "Run Tests" to start the Amplitude MCP verification</p>
      </div>
    )}

    {results && results.results && (
      <div class="space-y-4">
        {results.results.map((result: any, index: number) => (
          <div class={`border rounded-lg p-4 ${result.success ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'}`}>
            <div class="flex items-center justify-between">
              <div class="flex items-center">
                {result.success ? (
                  <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                  </svg>
                ) : (
                  <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd"></path>
                  </svg>
                )}
                <h3 class={`ml-2 text-sm font-medium ${result.success ? 'text-green-800' : 'text-red-800'}`}>
                  {result.test}
                </h3>
              </div>
              <span class="text-xs text-gray-500">{result.duration}ms</span>
            </div>
            
            {result.data && (
              <div class="mt-2 text-sm text-gray-600">
                <pre class="bg-gray-100 p-2 rounded text-xs overflow-x-auto">{JSON.stringify(result.data, null, 2)}</pre>
              </div>
            )}
            
            {result.error && (
              <div class="mt-2 text-sm text-red-700">
                <strong>Error:</strong> {result.error}
              </div>
            )}
          </div>
        ))}
        
        <div class="mt-6 p-4 bg-gray-50 rounded-lg">
          <div class="text-sm text-gray-600">
            <strong>Test Summary:</strong> 
            {results.results.filter((r: any) => r.success).length} of {results.results.length} tests passed
          </div>
          <div class="text-xs text-gray-500 mt-1">
            Completed at: {new Date(results.timestamp).toLocaleString()}
          </div>
        </div>
      </div>
    )}
  </div>
</div>

<script>
  const runButton = document.getElementById('run-tests');
  const resultsContainer = document.getElementById('results-container');
  
  if (runButton) {
    runButton.addEventListener('click', async () => {
      const buttonText = runButton.querySelector('.button-text');
      const loadingSpinner = runButton.querySelector('.loading-spinner');
      
      // Update button state
      runButton.setAttribute('data-loading', 'true');
      runButton.disabled = true;
      if (buttonText) buttonText.textContent = 'Running Tests...';
      if (loadingSpinner) loadingSpinner.classList.remove('hidden');
      
      try {
        const response = await fetch('/api/test-amplitude');
        const data = await response.json();
        
        // Update results
        if (resultsContainer) {
          if (data.success && data.results) {
            // Display test results
            const passedTests = data.results.filter(r => r.success).length;
            const totalTests = data.results.length;
            
            let resultsHTML = '<div class="space-y-4">';
            
            data.results.forEach(result => {
              const statusColor = result.success ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50';
              const iconColor = result.success ? 'text-green-400' : 'text-red-400';
              const textColor = result.success ? 'text-green-800' : 'text-red-800';
              const icon = result.success ? 
                '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>' :
                '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd"></path>';
              
              resultsHTML += `
                <div class="border rounded-lg p-4 ${statusColor}">
                  <div class="flex items-center justify-between">
                    <div class="flex items-center">
                      <svg class="h-5 w-5 ${iconColor}" viewBox="0 0 20 20" fill="currentColor">
                        ${icon}
                      </svg>
                      <h3 class="ml-2 text-sm font-medium ${textColor}">
                        ${result.test}
                      </h3>
                    </div>
                    <span class="text-xs text-gray-500">${result.duration}ms</span>
                  </div>
                  ${result.data ? `
                    <div class="mt-2 text-sm text-gray-600">
                      <pre class="bg-gray-100 p-2 rounded text-xs overflow-x-auto">${JSON.stringify(result.data, null, 2)}</pre>
                    </div>
                  ` : ''}
                  ${result.error ? `
                    <div class="mt-2 text-sm text-red-700">
                      <strong>Error:</strong> ${result.error}
                    </div>
                  ` : ''}
                </div>
              `;
            });
            
            resultsHTML += `
              </div>
              <div class="mt-6 p-4 bg-gray-50 rounded-lg">
                <div class="text-sm text-gray-600">
                  <strong>Test Summary:</strong> ${passedTests} of ${totalTests} tests passed
                </div>
                <div class="text-xs text-gray-500 mt-1">
                  Completed at: ${new Date(data.timestamp).toLocaleString()}
                </div>
              </div>
            `;
            
            resultsContainer.innerHTML = resultsHTML;
          } else {
            resultsContainer.innerHTML = `
              <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd"></path>
                    </svg>
                  </div>
                  <div class="ml-3">
                    <h3 class="text-sm font-medium text-red-800">Test Failed</h3>
                    <div class="mt-2 text-sm text-red-700">${data.error || 'Unknown error occurred'}</div>
                  </div>
                </div>
              </div>
            `;
          }
        }
      } catch (error) {
        console.error('Failed to run tests:', error);
        if (resultsContainer) {
          resultsContainer.innerHTML = `
            <div class="bg-red-50 border border-red-200 rounded-lg p-4">
              <div class="text-red-700">Failed to run tests: ${error.message}</div>
            </div>
          `;
        }
      } finally {
        // Reset button state
        runButton.setAttribute('data-loading', 'false');
        runButton.disabled = false;
        if (buttonText) buttonText.textContent = 'Run Tests';
        if (loadingSpinner) loadingSpinner.classList.add('hidden');
      }
    });
  }
</script> 